match([Child|Siblings], Expr) :-
    match(Child, Expr)
    ; match(Siblings, Expr).
match(Node, Expr) :-
    Node = Expr
    ; (Node = element(_, Children), match(Children, Expr)).
match(Expr) :-
    match({{prolog_ast}}, Expr).

visit(Rewriter, [], ResultExpr) :-
    ResultExpr = [].
visit(Rewriter, [Child|Siblings], ResultExpr) :-
    visit(Rewriter, Child, ChildExpr),
    visit(Rewriter, Siblings, SiblingExpr),
    append([ChildExpr], [SiblingExpr], ResultExpr).
visit(Rewriter, Expr, ResultExpr) :-
    % After rewriting a node visit its children (but _not_ the same node again.) 
    (rewrite(Rewriter, Expr, NewExpr), NewExpr = element(Tag,Attrs,NewChildren), visit(Rewriter, NewChildren, NewChildExpr), ResultExpr = element(Tag,Attrs,NewChildExpr), !)
    ; (Expr = element(Tag,Attrs,Children), visit(Rewriter, Children, ChildrenExpr), ResultExpr = element(Tag,Attrs,ChildrenExpr)).

visitAST(Rewriter, ResultExpr) :-
    visit(Rewriter, {{prolog_ast}}, ResultExpr).


linkRewriteAttrs([], []).
linkRewriteAttrs([Attr|Attrs], NewAttrs) :-
    Attr = attr(Key,Value),
    % TODO: Allow any dynamic predicate?
    % TODO: Handle relative links
    (Key = "href",!,
        linkRewriteAttrs(Attrs, SiblingAttrs),
        ((sub_string(Value, 0, _, _, "https://"), !, SiteURL = Value) ; string_concat("https://news.ycombinator.com/", Value, SiteURL)),
        string_concat("https://web.archive.org/web/",SiteURL,NewURL),
        append([attr("href", NewURL)], SiblingAttrs, NewAttrs))
    ; (linkRewriteAttrs(Attrs, SiblingAttrs),
        append([Attr],SiblingAttrs,NewAttrs)).

linkArchiveRewrite(Expr, NewExpr) :-
    Expr = element(a,Attrs,Children),
    linkRewriteAttrs(Attrs,NewAttrs),
    % TODO: Infinite recursion since the same node is visited (and matched on) again.
    NewExpr = element(a,NewAttrs,Children).

% Provide a dynamic predicate such as:
% TODO: Fix to work with new element AST definition
customRewrite(Expr, NewExpr) :-
    Expr = element(div,Attrs,Children),
    NewExpr = element(p,Attrs,Children).

% Example of applying a rule via call -- make a 'helloVisit' declaration that is wrapped with this
rewrite(Rule, Expr, NewExpr) :-
    call(Rule, Expr, NewExpr).

% Need to specify what the possibilities are
% TODO: Generate this from document? Other options?
% (Obviously can declare as facts, etc)
tag(Tag) :-
    Tag = '{{tags[0]}}'
    {%- for tag in tags[1:-1] %}
    ; Tag = '{{tag}}'
    {%- endfor %}
    ; Tag = '{{tags[-1]}}'.

% HTML AST
attr(Key, Value) :-
    string(Key), string(Value).
attrs([]).
attrs([Attr|Tail]) :-
    Attr = attr(_, _),
    attrs(Tail).

childElement([]).
childElement([Child|Siblings]) :-
    Child = element(Tag,Attrs,Children),
    tag(Tag),
    attrs(Attrs),
    childElement(Children),
    childElement(Siblings).

element(Tag,Attrs,Children) :-
    tag(Tag),
    attrs(Attrs),
    childElement(Children).

% TODO: Correct to work with new element AST definition 
%formatElement([], '').
%formatElement([E|Es], Output) :-
%    formatElement(E, EOut),
%    formatElement(Es, EsOut),
%    format(atom(Output), '~a~a', [EOut, EsOut]).
%formatElement(Element, Output) :-
%    Element = element(Tag, Children),
%    formatElement(Children, ChildOut),
%    format(atom(Output), '<~a>~a</~a>', [Tag, ChildOut, Tag]).
